package nstic.web

import org.springframework.security.access.prepost.PreAuthorize
import org.springframework.security.core.context.SecurityContextHolder
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken

import javax.servlet.ServletException

class ErrorController {

    def binaryIds = []  // not thread safe, but for demo purposes

    @PreAuthorize('hasAuthority("tat-admin")')
    def index() {
        log.debug("Loading error index page (for testing)...")
    }

    @PreAuthorize('hasAuthority("tat-admin")')
    def generate500() {
        User user = User.findByUsername(((OAuth2AuthenticationToken) SecurityContextHolder.getContext().getAuthentication()).getName())
        log.warn("Admin User[@|cyan ${user}|@] is triggering a Error 500 event intentionally...")
        throw new ServletException("Disregard - this message autogenerated by user: ${user}")
    }//end generate500()

    @PreAuthorize('permitAll')
    def error500() {
        def exception = request.exception

        def cause = exception?.cause
        while( cause?.cause )
            cause = cause?.cause

        log.error("The system generated an exception[" + exception?.toString() + "] caused by: [${cause?.toString()}]");
        withFormat{
            html{
                [cause: cause, exception: exception]
            }
            xml {
                render(contentType: 'application/xml',
                        text: "<error code=\"500\">\n"+
                                "    <exception class=\"${exception.class.name}\"><![CDATA[${exception.message}]]></exception>\n"+
                                (cause ?
                                        "    <cause class=\"${cause.class.name}\"><![CDATA[${cause.message}]]></cause>\n" : "" )+
                                "</error>")
            }
            json {
                render(contentType: 'application/json',
                        text: "{'code': 500, exception: "+
                                "{message: '${exception.message}', class: '${exception.class.name}'}"+
                                (cause ?
                                        ", cause: {class: '${cause.class.name}', message: '${cause.message}'}" : "" )+
                                "}")
            }
        }
    }

    @PreAuthorize('permitAll')
    def notFound404(){
        User user = User.findByUsername(((OAuth2AuthenticationToken) SecurityContextHolder.getContext().getAuthentication()).getName())
        log.warn("User[@|yellow ${user ?: request.remoteAddr}|@] has requested unknown page: ${request.getAttribute('javax.servlet.error.request_uri')}")
    }//end notFound404

    @PreAuthorize('permitAll')
    def notAuthorized401(){
        User user = User.findByUsername(((OAuth2AuthenticationToken) SecurityContextHolder.getContext().getAuthentication()).getName())
        log.warn("User[@|red ${user ?: request.remoteAddr}|@] has requested unauthorized page: ${request.getAttribute('javax.servlet.error.request_uri')}")
    }//end notAuthorized401

}//end ErrorController()
